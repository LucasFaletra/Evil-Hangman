#ifndef MY_STRING_H
#define MY_STRING_H
#include <stdio.h>
#include "status.h"
#include "generic.h"
typedef void* MY_STRING;
typedef void* AVL;
struct node {
  MY_STRING key;
  GENERIC_VECTOR words;
  struct node* left;
  struct node* right;
  struct node* parent;
  int height;
};
typedef struct node Node;

MY_STRING my_string_init_default(void);

MY_STRING my_string_init_c_string(const char* c_string);

void my_string_destroy(Item* pItem);

int my_string_get_capacity(MY_STRING hMy_string);

int my_string_get_size(MY_STRING hMy_string);

int my_string_compare(MY_STRING hLeft_string, MY_STRING hRight_string);

Status my_string_extraction(MY_STRING hMy_string, FILE* fp);

Status my_string_insertion(MY_STRING hMystring, FILE* fp);

Status my_string_push_back(MY_STRING hMy_string, char item);

Status my_string_pop_back(MY_STRING hMy_string);

char* my_string_at(MY_STRING hMy_string, int index);

char* my_string_c_str(MY_STRING hMy_string);

Status my_string_concat(MY_STRING hResult, MY_STRING hAppend);

Boolean my_string_empty(MY_STRING hMy_string);

Status my_string_assignment(Item* pLeft, Item Right);

Status get_word_key_value(MY_STRING current_word_family, MY_STRING new_key, MY_STRING word, char guess);

MY_STRING key_init_default(int word_length);

int get_h(Node* n);

Node* find_max(Node* tree, Node* max);

Boolean check_for_key(Node* tree, MY_STRING key);

void node_destroy(Node** n);

int is_balanced(Node* n);

void destroy_tree(Node** tree);

Node* rotate_left(Node* n);

Node* rotate_right(Node* n);

Node* node_init(MY_STRING current_word_family, MY_STRING word, char guess);

Node* insert_node(Node* n, MY_STRING key, MY_STRING current_word_family, MY_STRING word, char guess);

int height_compare(int x, int y);

Node* find_key(Node* tree, MY_STRING key);
#endif
